# -*- coding: utf-8 -*-
"""test_maskrcnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qjp_5BEsA6jurhkz9GV2Noem8hKUHZ5y

# Testing Custom Mask R-CNN Model
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
ROOT_DIR = '/content/drive/MyDrive/testing_maskrcnn/'
# %cd /content/drive/MyDrive/testing_maskrcnn/

WEIGHTS_PATH = ROOT_DIR + "2/mask_rcnn_object_0075.h5"

!pip install -r '/content/drive/MyDrive/testing_maskrcnn/requirements.txt'

!python3 setup.py install

import warnings
warnings.filterwarnings('ignore')
import os
import sys
import json
import datetime
import numpy as np
import skimage.draw
import cv2
import random
import math
import re
import time
import tensorflow as tf
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.image as mpimg
import skimage.io

sys.path.append(ROOT_DIR)

from mrcnn import utils
from mrcnn import visualize
from mrcnn.visualize import display_instances
import mrcnn.model as modellib
from mrcnn.model import log
from mrcnn.config import Config
from mrcnn import model as modellib, utils

class CustomConfig(Config):
    """Configuration for training on the custom  dataset.
    Derives from the base Config class and overrides some values.
    """
    # Give the configuration a recognizable name
    NAME = "object"

    GPU_COUNT = 1
    IMAGES_PER_GPU = 2

    # Number of classes (including background)
    NUM_CLASSES = 1 + 2 

    # Number of training steps per epoch
    STEPS_PER_EPOCH = 100

    # Skip detections with < 80% confidence
    DETECTION_MIN_CONFIDENCE = 0.8

    VALIDATION_STEPS = 10

config = CustomConfig()
class InferenceConfig(config.__class__):
    # Run detection on one image at a time
    GPU_COUNT = 1
    IMAGES_PER_GPU = 1
    DETECTION_MIN_CONFIDENCE = 0.9

config = InferenceConfig()
#config.display()

#config = CustomConfig()
#LOAD MODEL. Create model in inference mode
model = modellib.MaskRCNN(mode="inference", model_dir=ROOT_DIR, config=config)

# Load COCO weights Or, load the last model you trained
weights_path = WEIGHTS_PATH
# Load weights
print("Loading weights ", weights_path)
model.load_weights(weights_path, by_name=True)

def get_ax(rows=1, cols=1, size=16):
    _, ax = plt.subplots(rows, cols, figsize=(size*cols, size*rows))
    return ax

# Predicting images which are not in the training set.

img_name = "15985.png"

# Getting the image to be predicted
image_path = ROOT_DIR + "test_imgs/" + img_name
test_image = skimage.io.imread(image_path)

# Fitting the image into processable form by Mask R-CNN Network
if test_image.ndim != 3:
    test_image = skimage.color.gray2rgb(image1)
# Remove alpha channel for consistency, if it has one
if test_image.shape[-1] == 4:
    test_image = test_image[..., :3]
            
results = model.detect([test_image], verbose=1) # Returns the class prediction, mask and the box
results = results[0]

# Display prediction results
ax = get_ax(1)
visualize.display_instances(test_image, results['rois'], results['masks'], results['class_ids'],
["bg", "İskemik", "Kanamalı"], results['scores'], ax=ax, title="Prediction")

# Getting the mask image provided for the test image
path_to_mask = ROOT_DIR+"test_masks/"+img_name
mask = skimage.io.imread(path_to_mask)

# Extracting mask pixels in bool manner
mask_extracted = []
for x in mask:
  line = []
  for y in x:
    if y.any() != 0:
      line.append([True])
    else:
      line.append([False])
  mask_extracted.append(line)
mask_extracted = np.array(mask_extracted)

# Prediction results include prediction mask data.
# Forming this data into the same way as we have.
extracted_pred_mask = []
for x in results['masks']:
  line = []
  for y in x:
    if y.any() != 0:
      line.append([True])
    else:
      line.append([False])
  extracted_pred_mask.append(line)
extracted_pred_mask = np.array(extracted_pred_mask)

# IoU Score
utils.compute_overlaps_masks(mask_extracted, extracted_pred_mask)[0][0]